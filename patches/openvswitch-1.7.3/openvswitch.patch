diff -rupN openvswitch-1.7.3/datapath/linux/compat/include/linux/etherdevice.h openvswitch-1.7.3.mod/datapath/linux/compat/include/linux/etherdevice.h
--- openvswitch-1.7.3/datapath/linux/compat/include/linux/etherdevice.h	2013-01-23 05:57:58.000000000 +0800
+++ openvswitch-1.7.3.mod/datapath/linux/compat/include/linux/etherdevice.h	2013-08-26 10:04:26.512900130 +0800
@@ -5,7 +5,7 @@
 #include_next <linux/etherdevice.h>
 
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,36)
-static inline void eth_hw_addr_random(struct net_device *dev)
+static inline void eth_hw_addr_random2(struct net_device *dev)
 {
 	random_ether_addr(dev->dev_addr);
 }
diff -rupN openvswitch-1.7.3/datapath/linux/compat/include/linux/if_vlan.h openvswitch-1.7.3.mod/datapath/linux/compat/include/linux/if_vlan.h
--- openvswitch-1.7.3/datapath/linux/compat/include/linux/if_vlan.h	2013-01-23 05:57:58.000000000 +0800
+++ openvswitch-1.7.3.mod/datapath/linux/compat/include/linux/if_vlan.h	2013-08-26 10:04:56.445772418 +0800
@@ -56,7 +56,7 @@ static inline struct sk_buff *__vlan_put
 #endif
 
 #if LINUX_VERSION_CODE < KERNEL_VERSION(3,3,0)
-static inline void vlan_set_encap_proto(struct sk_buff *skb, struct vlan_hdr *vhdr)
+static inline void vlan_set_encap_proto2(struct sk_buff *skb, struct vlan_hdr *vhdr)
 {
 	__be16 proto;
 	unsigned char *rawp;
diff -rupN openvswitch-1.7.3/datapath/linux/compat/include/linux/skbuff.h openvswitch-1.7.3.mod/datapath/linux/compat/include/linux/skbuff.h
--- openvswitch-1.7.3/datapath/linux/compat/include/linux/skbuff.h	2013-01-23 10:38:24.000000000 +0800
+++ openvswitch-1.7.3.mod/datapath/linux/compat/include/linux/skbuff.h	2013-08-26 10:03:37.656476315 +0800
@@ -239,14 +239,14 @@ static inline bool skb_warn_if_lro(const
 #endif
 
 #if LINUX_VERSION_CODE < KERNEL_VERSION(3,2,0)
-static inline struct page *skb_frag_page(const skb_frag_t *frag)
+static inline struct page *skb_frag_page2(const skb_frag_t *frag)
 {
 	return frag->page;
 }
 #endif
 
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,40)
-static inline void skb_reset_mac_len(struct sk_buff *skb)
+static inline void skb_reset_mac_len2(struct sk_buff *skb)
 {
 	skb->mac_len = skb->network_header - skb->mac_header;
 }
